#include <iostream>
#include"workerManager.h"
#include"boss.h"
#include"employee.h"
#include"manager.h"
using namespace std;
//职工管理系统

// 职工管理系统可以用来管理公司内所有员工的信息

// 公司中职工分为三类:普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及
//职责普通员工职责:完成经理交给的任务
// 经理职责:完成老板交给的任务，并下发任务给员工
//老板职责:管理公司所有事务

// 管理系统中需要实现的功能如下:
// 退出管理程序:退出当前管理系统
// 增加职工信息:实现批量添加职工功能，将信息录入到文件中，职工信息为:职工编号、姓名、部门编号
// 显示职工信息:显示公司内部所有职工的信息
// 删除离职职工:按照编号删除指定的职工
// 修改职工信息:按照编号修改职工个人信息
// 查找职工信息:按照职工的编号或者职工的姓名进行查找相关的人员信息
// 按照编号排序:按照职工编号，进行排序，排序规则由用户指定
// 清空所有文档:清空文件中记录的所有职工信息(清空前需要再次确认，防止误删)

//1.创建管理类 头文件workerManager.h 源文件workerManager.cpp
//管理类负责的内容如下:
//1.1与用户的沟通菜单界面
//1.2对职工增删改查的操作
//1.3与文件的读写交互

//2.创建职工抽象类 头文件worker.h 源文件worker.cpp
// 职工的分类为:普通员工、经理、老板将三种职工抽象到一个类(worker)中,利用多态管理不同职工种类
// 职工的属性为:职工编号、职工姓名、职工所在部门编号
// 职工的行为为:岗位职责信息描述，获取岗位名称
//2.1创建普通员工类 头文件employee.h 源文件employee.cpp
//继承职工抽象类，重写父类纯虚函数
//2.2创建经理类 头文件manager.h 源文件manager.cpp
//继承职工抽象类，重写父类纯虚函数
//2.3创建老板类 头文件boss.h 源文件boss.cpp
//继承职工抽象类，重写父类纯虚函数

//3.添加员工
//3.1
//功能描述：批量添加职工，并且保存到文件中
//用户在批量创建时，可能会创建不同种类的职工
//如果想将所有不同种类的员工都放入到一个数组中，可以将所有员工的指针维护到一个数组里
//如果想在程序中维护这个不定长数组，可以将数组创建到堆区，并利用Worker**的指针维护
//3.2写文件
//功能描述：对文件进行读写
//在上一个添加功能中，只是将数据添加到了内存中，一旦程序结束就无法保存了
//因此文件管理类中需要一个与文件进行交互的功能，对文件进行读写操作
//3.3读文件
//功能描述：将文件中的内容读取到程序中
//虽然我们实现了添加职工后保存到文件的操作，但是每次开始运行程序没有将文件中数据读取到程序中
//而我们的程序功能中还有清空文件的需求
//因此构造函数初始化的情况分为三种
//(1)第一次使用，文件未创建
//(2)文件存在，但是数据被清空
//(3)文件存在并且保存职工所有数据

//4.删除职工
//功能描述：按照职工的编号进行删除职工操作
//4.1判断职工是否存在
//4.2删除 数组中删除 本质是数据前移

//5.修改职工

//6.查找职工
//功能描述：提供两种查找职工方式，一种按照职工编号，一种按照职工姓名

//7.排序职工
//功能描述：按照职工编号进行排序，排序的顺序由用户决定
//1--升序
//2--降序

int main()
{
    //测试代码
    // Worker * worker = NULL;

    // worker = new Employee(1, "tom", 1);
    // worker->showInfo();
    // delete worker;

    // worker = new Manager(2, "jerry", 2);
    // worker->showInfo();
    // delete worker;

    // worker = new Boss(3, "jack", 3);
    // worker->showInfo();
    // delete worker;



    WorkerManager wm;
    int choice; // 选择变量
    while (1)
    {
        wm.show_Menu();
        cout << "请输入您的选择:" << endl;
        cin >> choice;

        switch (choice)
        {
        case 0: // 退出系统
            wm.exitSystem();
            break;
        case 1: // 添加职工
            wm.Add_Emp();
            break;
        case 2: // 显示职工
            wm.Show_Emp();
            break;
        case 3: // 删除职工
            wm.Del_Emp();
            break;
        case 4: // 修改职工
            wm.Mod_Emp();
            break;
        case 5: // 查找职工
            wm.Find_Emp();
            break;
        case 6: // 排序职工
            wm.Sort_Emp();
            break;
        case 7: // 清空文件
            wm.Clean_File();
            break;
        default:
            system("cls");
            break;
        }
    }
}
